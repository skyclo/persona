{
  "name": "Persona",
  "nodes": [
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"firstName\": { \"type\": \"string\" },\n    \"lastName\": { \"type\": \"string\" },\n\n    \"age\": { \"type\": \"integer\", \"minimum\": 0, \"maximum\": 120 },\n    \"gender\": {\n      \"type\": \"string\",\n      \"enum\": [\"Male\", \"Female\", \"Non-binary\", \"Other\", \"Prefer not to say\"]\n    },\n    \"race\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"White\",\n        \"Black or African American\",\n        \"Asian\",\n        \"American Indian or Alaska Native\",\n        \"Native Hawaiian or Other Pacific Islander\",\n        \"Other\",\n        \"Prefer not to say\"\n      ]\n    },\n    \"isHispanic\": { \"type\": \"boolean\" },\n\n    \"location\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"country\": { \"type\": \"string\" },\n        \"state\": { \"type\": \"string\" },\n        \"city\": { \"type\": \"string\" }\n      },\n      \"required\": [\"country\"]\n    },\n\n    \"employment\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"jobType\": {\n          \"type\": \"string\",\n          \"enum\": [\n            \"Full-time\",\n            \"Part-time\",\n            \"Unemployed\",\n            \"Retired\",\n            \"Self-employed\",\n            \"Internship\",\n            \"Contractor\"\n          ]\n        },\n        \"title\": { \"type\": \"string\" },\n        \"industry\": { \"type\": \"string\" },\n        \"salary\": { \"type\": \"number\", \"minimum\": 0 }\n      }\n    },\n\n    \"education\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"level\": {\n            \"type\": \"string\",\n            \"enum\": [\n              \"High School\",\n              \"Some College\",\n              \"Associate's\",\n              \"Bachelor's\",\n              \"Master's\",\n              \"Doctorate\",\n              \"Vocational / Technical\",\n              \"Other\"\n            ]\n          },\n          \"fieldOfStudy\": { \"type\": \"string\" },\n          \"institution\": { \"type\": \"string\" },\n          \"yearCompleted\": {\n            \"type\": \"integer\",\n            \"minimum\": 1900,\n            \"maximum\": 2100\n          }\n        },\n        \"required\": [\"level\", \"fieldOfStudy\", \"institution\", \"yearCompleted\"]\n      }\n    }\n  },\n  \"required\": [\n    \"firstName\",\n    \"lastName\",\n    \"age\",\n    \"gender\",\n    \"race\",\n    \"isHispanic\",\n    \"location\",\n    \"employment\",\n    \"education\"\n  ]\n}\n",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -800,
        688
      ],
      "id": "5473cbd1-f5db-4cf6-adc5-6bcb66864a25",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"answers\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": [\"string\", \"array\", \"number\", \"boolean\", \"null\"],\n        \"description\": \"The answer(s) chosen by the persona as a response to the question. Use null to skip an optional question\"\n      }\n    }\n  },\n  \"required\": [\"answers\"]\n}",
        "autoFix": true
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.3,
      "position": [
        -336,
        688
      ],
      "id": "7ddfc6c3-cbe1-4a47-b2a8-c3b317c211ff",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "results",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        288,
        464
      ],
      "id": "ec641919-3c20-4e57-96f3-b51b898a8ed3",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "return Array.from({length: $input.first().json.body.numberPersonas}).fill({})"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1072,
        464
      ],
      "id": "2bd56639-ece2-418d-86bc-19538f8ace4b",
      "name": "Return n empty personas"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI persona generator that creates realistic customer profiles for marketing research.\n\nTASK:\nGenerate a distinct customer persona working in the {{ $('gen_personas').item.json.body.industry }} industry in the geographic region of {{ $('gen_personas').item.json.body.region }} with an age range of {{ $('gen_personas').item.json.body.age.low }} to {{ $('gen_personas').item.json.body.age.high }}.\n\nRULES:\n- All personas MUST be unique\n- Demographics MUST reflect those of real life in the specified geographic region\n- DO NOT enforce stereotypes\n- Multiple personas with similar demographics (ie. age, race, gender) are fine, but do not repeat the same personas.\n- DO NOT reuse names\n- DO NOT repeat yourself\n- DO NOT go outside of the defined schema or use markdown\n\nDATETIME: {{ $now }}\nRUN: {{ $execution.id }}\nSEED: {{ Math.random()*10e16 }}",
        "hasOutputParser": true,
        "options": {
          "batching": {
            "batchSize": 1
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -864,
        464
      ],
      "id": "9709b479-744f-441c-8039-86954063534f",
      "name": "Persona Generator Agent"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are role-playing as a specific customer persona.\n\nPERSONA CONTEXT:\n{{ JSON.stringify($json.output, null, 4) }}\n\nSURVEY QUESTIONS:\n{{ JSON.stringify($('gen_personas').item.json.body.questions, null, 4) }}\n\nTASK:\nAnswer the questions EXACTLY as the persona would respond.\nAnswers should be short, natural, and persona-consistent.\nInclude confidence and a short rationale (for judge explainability).\n\nRULES:\n- The responses to subjective questions MUST represent the unique opinion of the emulated persona\n- The responses to objective questions MUST be as factual as possible, but allowed to deviate slightly based on the emulated persona's education, experience, and knowledge of the particular subject\n- The responses should reflect the emulated persona\n- DO NOT enforce stereotypes\n- DO NOT answer in any other format other than the provided structured output\n- DO NOT deviate from answering questions\n- YOU WILL follow the directions of the question provided. Questions may ask you to select only 1 option, select multiple/all that apply, etc.\n- YOU WILL respond to ALL questions. If a question is optional and not applicable to you or you choose not to respond to that question, then respond with \"null\"\n\nQUESTION TYPES:\n- `multiple`: select `maxSelection` number of choices (`maxSelection > 1` means that more than 1 option can be selected)\n- `scale`: pick a whole number from `min` to `max`\n- `binary`: select only 1 answer (`true` = \"Yes/Agree/True\", `false` = \"No/Disagree/False\")\n- `short_response`: freely but briefly respond to the question up to `maxChars` long\n- `long_response`: freely respond to the question up to `maxChars` long\n\nDATETIME: {{ $now }}\nRUN: {{ $execution.id }}\nSEED: {{ Math.random()*10e16 }}",
        "hasOutputParser": true,
        "options": {
          "batching": {
            "batchSize": 20
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -480,
        464
      ],
      "id": "10267b01-4772-4358-8ad2-49094eb396a3",
      "name": "Persona Emulator Agent"
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $execution.id }}",
        "contextWindowLength": 400
      },
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        -928,
        688
      ],
      "id": "43efd0e6-2b92-4311-97a5-850cc1335f3a",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "return $('Persona Emulator Agent').all().map((v, i) => {  \n  return {\n    ...$(\"Persona Generator Agent\").all()[i].json.output, \n    response: v.json.output.answers,\n    point: $input.all()[i].json.results[0].geometry.location\n  }\n})"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        64,
        464
      ],
      "id": "3cef6978-7e5f-4993-9993-b86423ed92ed",
      "name": "Merge responses into personas"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "persona/gen_personas",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1296,
        464
      ],
      "id": "4b838495-37fb-411a-8a72-88382a1d839f",
      "name": "gen_personas",
      "webhookId": "a0c49bf5-1d03-4283-b4da-c7a0c7ed3cac"
    },
    {
      "parameters": {
        "path": "persona/gen_summary",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1280,
        1008
      ],
      "id": "8ab57091-fd25-4f03-b13f-904599984f4e",
      "name": "gen_summary",
      "webhookId": "cf9838d7-5800-4337-b687-d947835eddaf"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Summarize the following survey responses in a short 2-4 sentence paragraph:\n\n{{ $json }}",
        "hasOutputParser": true,
        "options": {
          "batching": {
            "batchSize": 1
          }
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        -1072,
        1008
      ],
      "id": "e8a102b9-1a5d-4839-8f12-56ab8782e756",
      "name": "Persona Generator Agent1"
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {
          "frequencyPenalty": 0.1,
          "presencePenalty": 0,
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -800,
        1296
      ],
      "id": "2db6decc-403a-4563-b60d-36386929b70b",
      "name": "Google Gemini 2.5 Flash (OR) (LT)1",
      "credentials": {
        "openRouterApi": {
          "id": "2CBIQxPbaCadgzGC",
          "name": "Persona OpenRouter Key"
        }
      }
    },
    {
      "parameters": {
        "model": "google/gemini-2.5-flash",
        "options": {
          "frequencyPenalty": 0.1,
          "presencePenalty": 0,
          "temperature": 0.8
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        -480,
        688
      ],
      "id": "e8b4ac9a-2163-4abc-8a32-794a664cc6bc",
      "name": "Google Gemini 2.5 Flash (OR) (HT)",
      "credentials": {
        "openRouterApi": {
          "id": "2CBIQxPbaCadgzGC",
          "name": "Persona OpenRouter Key"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        -720,
        1008
      ],
      "id": "80db6693-32ce-4830-8706-f3570a1cd1ef",
      "name": "Return Summary"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        496,
        464
      ],
      "id": "3de11173-c43b-4fb7-acd5-a4635d51913e",
      "name": "Return personas"
    },
    {
      "parameters": {
        "url": "https://maps.googleapis.com/maps/api/geocode/json",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpCustomAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "address",
              "value": "={{ $('Persona Generator Agent').item.json.output.location.city }}, {{ $('Persona Generator Agent').item.json.output.location.state ? $('Persona Generator Agent').item.json.output.location.state + \", \" : \"\" }}{{ $('Persona Generator Agent').item.json.output.location.country }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -144,
        464
      ],
      "id": "86e6ead1-84bc-4898-82cb-4057d9026ab7",
      "name": "HTTP Request",
      "credentials": {
        "httpQueryAuth": {
          "id": "55F9VR7wmzrPFU6T",
          "name": "Query Auth account"
        },
        "httpCustomAuth": {
          "id": "doUz9wtwA7GoMhuu",
          "name": "Custom Auth account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "Persona Generator Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "Persona Emulator Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Return personas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Return n empty personas": {
      "main": [
        [
          {
            "node": "Persona Generator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Persona Generator Agent": {
      "main": [
        [
          {
            "node": "Persona Emulator Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Persona Emulator Agent": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Persona Generator Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Merge responses into personas": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gen_personas": {
      "main": [
        [
          {
            "node": "Return n empty personas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "gen_summary": {
      "main": [
        [
          {
            "node": "Persona Generator Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini 2.5 Flash (OR) (HT)": {
      "ai_languageModel": [
        [
          {
            "node": "Persona Emulator Agent",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Persona Generator Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini 2.5 Flash (OR) (LT)1": {
      "ai_languageModel": [
        [
          {
            "node": "Structured Output Parser",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Structured Output Parser1",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Persona Generator Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Persona Generator Agent1": {
      "main": [
        [
          {
            "node": "Return Summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Merge responses into personas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "2f8d7e4e-00f1-4239-8ca4-f77b2ea480c4",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "4416c7ff93a98e2cf3dbcf0cff7ea5ff65986f3b33cc07588119f130cca70924"
  },
  "id": "vuG4Dk4G9o4hBWXW",
  "tags": []
}